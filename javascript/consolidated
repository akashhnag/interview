q) what is javascript?
a) Javascript is a programming language to bring funcitonality to the web page.

q) is javascript single theraded or multithreaded?
a) single threaded

q) how does javascript handles asynchronous operations?
q) what is event loop? how does it works?
q) wht are promises?
q) promise.all vs promise.allSettled
q) event emmiters
q) call, apply and bind
q) map vs weakmap
q) null vs undefined
q) prototype functions in javscript
q) async vs generators

q) What are promises? give an example.
a) Promises are used to execute multiple asynchronous operations where using a callback could 
lead to "callback hell" and create an unmanageable code.

Promises have 4 stages:
1) Fulfilled: The promise action succeeded.
2) Rejected: The promise action failed.
3) Pending: The promise action niether fulfilled nor rejected.
4) Settled: The promise action either fulfilled or rejected.

Promise consumer: Any function can consume the promise with the help of "then()" and "catch()"
methods.

q) what is promise chaining?
a) promise chaining is very helpful in handling multiple promises. in this a promise returns a value which can be accessed with the 'then()' method.

q) what is an asynchronous operation?
a) asynchronous operation is the ability of a javascript program to run a long running task in the background while still receptive of new operations and execute them and later comeup with the result of the long running operation.

q) what are callbacks?
a) In javascript, functions are first class objects which means they can be passed as an argument to other functions and used anywhere in the lifetime of that function.

Helps where the result of asynchronous operation is required for next batch of operations.

q) what is a callback hell?
a) callback hells are bunch of nested callback functions where result of a callback is dependent on previous callback. It creats a pyramid like structure which leads to unmanageable and unreadable code.

q) how can callback hell be avoided?
a) It can be avoided using a promise or async await.

q) what is async await?
a) async-await is a syntactical sugar of Promises, which means that it makes implementing Promises easier. 

"async" makes a function return a Promise, "await" makes a function wait for a Promise. 

"await" can be only called inside an async function.

5) ecmascript in javascript
a) ecmascript is standard for javascript. it works towards making javascript a better scripting language that includes syntax, error handling, datatypes, inheritance, built in function etc.

6) difference between let,const and var
a var is global and functional scoped. var can be re-declared and updated.var is hoisted and 
initialized to "undefined".
let is block scoped. it cannot be re-declared but can be updated. let is hoisted but not 
initialized.
const is also block scoped. it can neither be updated or re-declared. const is hoisted and not
initialized. const should be initialzed at the time of declaration.

q) spread operator in javascript
a) spread operators are used to copy the contents of an object to another.

q) what are arrow function?
a) arrow functions are easier implementation of normal functions. it was introduced in es6. it need not use the "return" keyword if the function consists of a single line. it need not use paranthesis if function takes in a single parameter.

to access the arguments in a normal function we use "arguments" keyword. we cannot use "arguments" in arrow function but we can use rest operator.

normal functions can have duplicate parameters with no strict mode. arrow functions can never have duplicate parameters.

9) what is typescript?
a) it is a syntactical superset of javascript which adds static typing (allows us to add types
 to the variables).

10) set timeout and set interval? how to stop it?
a) setTimeout will execute a function after a given time. setInterval does the same thing but it continously keeps doing it unless stopped explicitly. to stop the setTimeout method we can use "clearTimeout" and for stoping the setInterval we can use "clearInterval".

1) difference btween local and session storeage
2) why is reactjs famous?
3) folder structure for reactjs
4) react fragment
5) state vs props
5) what is redux and how does it works?